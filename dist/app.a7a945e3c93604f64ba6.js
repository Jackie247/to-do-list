"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkto_do_list"] = self["webpackChunkto_do_list"] || []).push([["app"],{

/***/ "./src/localStorage.js":
/*!*****************************!*\
  !*** ./src/localStorage.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LocalStorage)\n/* harmony export */ });\n/* harmony import */ var _project__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./project */ \"./src/project.js\");\n/* harmony import */ var _task__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task */ \"./src/task.js\");\n/* harmony import */ var _projectList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./projectList */ \"./src/projectList.js\");\n\n\n\n\nclass LocalStorage{\n    static updateStorage(data){\n        // updates the object array with current project list objects\n        // stringify maintains the data's formatting, instead of just turning data into strings.\n        localStorage.setItem('ProjectData',JSON.stringify(data));\n        return;\n    }\n    static getSavedProjectList(){\n        // parse the array from local memory into a variable\n        // use standardized function object.assign to copy all enumerable properties to a target object.\n        // in this case, a new project list. \n        const projectList = Object.assign(\n            new _projectList__WEBPACK_IMPORTED_MODULE_2__[\"default\"](),\n            JSON.parse(localStorage.getItem('ProjectData'))\n        )\n        // since the parsed objects are just in string form. we need to turn them back into objects.\n        // repeat this for the projects in the project list and for each task within each project\n        projectList.setProjects(\n            projectList\n              .getProjects()\n              .map((project) => Object.assign(new _project__WEBPACK_IMPORTED_MODULE_0__[\"default\"](), project))\n          )\n        projectList\n            .getProjects()\n            .forEach(project => {\n                project.setTaskList(\n                    project.getTaskList().map(task => Object.assign(new _task__WEBPACK_IMPORTED_MODULE_1__[\"default\"](), task))\n                )\n            })         \n        return projectList;\n    }\n    static addProject(project){\n        const savedProjectList = LocalStorage.getSavedProjectList();\n        savedProjectList.addProject(project);\n        LocalStorage.updateStorage(savedProjectList);\n        return;\n    }\n    static deleteProject(projectName){\n        const savedProjectList = LocalStorage.getSavedProjectList();\n        savedProjectList.deleteProject(projectName)\n        LocalStorage.updateStorage(savedProjectList);\n        return;\n    }\n    static addTask(projectName, task){\n        const savedProjectList = LocalStorage.getSavedProjectList();\n        savedProjectList.getProject(projectName).addTask(task);\n        LocalStorage.updateStorage(savedProjectList);\n        return;\n    }\n    static deleteTask(projectName,taskName){\n        const savedProjectList = LocalStorage.getSavedProjectList();\n        savedProjectList.getProject(projectName).deleteTask(taskName);\n        LocalStorage.updateStorage(savedProjectList);\n        return;\n    }\n    static renameTask(projectName, taskName, newName){\n        const savedProjectList = LocalStorage.getSavedProjectList();\n        savedProjectList.getProject(projectName).getTask(taskName).setTaskName(newName);\n        LocalStorage.updateStorage(savedProjectList);\n        return;\n    }\n    static setTaskDate(projectName,taskName,date){\n        const savedProjectList = LocalStorage.getSavedProjectList();\n        savedProjectList.getProject(projectName).getTask(taskName).setDate(date);\n        LocalStorage.updateStorage(savedProjectList);\n        return;\n    }\n    static setTaskDetails(projectName,taskName,details){\n        const savedProjectList = LocalStorage.getSavedProjectList();\n        savedProjectList.getProject(projectName).getTask(taskName).setDetails(details);\n        LocalStorage.updateStorage(savedProjectList);\n        return;\n    }\n    static updateToday(){\n        const savedProjectList = LocalStorage.getSavedProjectList();\n        savedProjectList.updateToday();\n        LocalStorage.updateStorage(savedProjectList);\n        return;\n    }\n    static updateUpcoming(){\n        const savedProjectList = LocalStorage.getSavedProjectList();\n        savedProjectList.updateUpcoming();\n        LocalStorage.updateStorage(savedProjectList);\n        return;\n    }\n}\n\n//# sourceURL=webpack://to-do-list/./src/localStorage.js?");

/***/ }),

/***/ "./src/project.js":
/*!************************!*\
  !*** ./src/project.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Project)\n/* harmony export */ });\nclass Project{\n    constructor(name){\n        this.name = name;\n        this.taskList = [];\n    }\n    // GETTERS AND SETTERS //\n    setName(name){\n        this.name = name;\n    }\n    getName(){\n        return this.name;\n    }\n    setTaskList(tasks){\n        // sets this.taskList as a reference to new list;\n        this.taskList = tasks;\n    }\n    getTaskList(){\n        return this.taskList;\n    }\n    // METHODS //\n    addTask(newTask){\n        if(this.taskList.find((task) => task.getTaskName() === newTask.name)) return;\n        this.taskList.push(newTask);\n    }\n    deleteTask(task){\n        var index = this.taskList.indexOf(this.getTask(task));\n        this.taskList.splice(index, 1);\n        return;\n    }\n    getTask(taskName){\n        return this.taskList.find((task) => task.getTaskName() === taskName);\n    } \n    // HELPER //\n    taskListContains(taskName){\n        // returns true if found, false if not.\n        return this.taskList.some(task => task.getTaskName() === taskName);\n    }\n}\n\n//# sourceURL=webpack://to-do-list/./src/project.js?");

/***/ }),

/***/ "./src/projectList.js":
/*!****************************!*\
  !*** ./src/projectList.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ProjectList)\n/* harmony export */ });\n/* harmony import */ var _project_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./project.js */ \"./src/project.js\");\n/* harmony import */ var _task_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task.js */ \"./src/task.js\");\n\n\n\nclass ProjectList{\n    constructor(){\n        this.projectList = [];\n        this.projectList.push(new _project_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('Inbox'));\n        this.projectList.push(new _project_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('Today'));\n        this.projectList.push(new _project_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('Upcoming'));\n    }\n    // GETTERS AND SETTERS //\n    getProjects(){\n        return this.projectList;\n    }\n    setProjects(projectList){\n        this.projectList = projectList;\n    }\n    getProject(projectName){\n        // returns the first element that satisfies the condition\n        return this.projectList.find((project) => project.getName() === projectName);\n    }\n    // METHODS //\n    addProject(newProject){\n        // only add to project list if project doesnt exist.\n        if(this.projectList.find((project) => project.name === newProject.name)){\n            return;\n        }\n        this.projectList.push(newProject);\n    }\n    deleteProject(projectName){\n        // check if projectlist contains project\n        // if it does, remove the project from list.\n        if(this.projectListContains(projectName)){\n            this.projectList.splice(\n                this.projectList.indexOf(\n                    this.getProject(projectName)),1);\n        }\n        return;\n    }\n    updateToday(){\n        // clear the tasks from today project list\n        while(this.getProject('Today').getTaskList().length > 0){\n            this.getProject('Today').pop();\n        }\n        // update the today list with only tasks that have todays date\n        // check every project for tasks that have due date today\n        this.projectList.forEach((project) => {\n            // skip project today since its empty, and skip upcoming so we dont get duplicates\n            if(project.getName() === 'Today' || project.getName() === 'Upcoming'){\n                return;\n            }\n            this.getProject('Today').getTaskList().forEach((task)=>{\n                const newTask = `(${project.getProjectName()}) ${task.getTaskName()}`;\n                this.getProject('Today').addTask(new _task_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](newTask, task.getDate()));\n            })\n        })\n        \n    }\n    updateUpcoming(){\n        while(this.getProject('Upcoming').getTaskList().length > 0){\n            this.getProject('Upcoming').pop();\n        }\n        // update incoming with only tasks that are within a week range.\n        this.projectList.forEach((project)=>{\n            // skip today since they will be in today inbox and skip upcoming since empty list.\n            if(project.getName() === 'Today' || project.getName() === 'Upcoming'){\n                return;\n            }\n            // create new tasks for upcoming. \n            this.getProject('Upcoming').getTaskList().forEach((task) => {\n                const newTask = `${project.getProjectName()} ${task.getTaskName()}`;\n                this.getProject('Upcoming').addTask(new _task_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](newTask, task.getDate()));\n            })\n        })\n        this.getProject('Upcoming').setTaskList(\n            this.getProject('Upcoming').getTaskList().sort((taskOne,taskTwo) =>{\n                const first = new Date(taskOne);\n                const second = new Date(taskTwo);\n                return first - second;\n        }))\n    }\n    // HELPERS // \n    projectListContains(projectName){\n        // returns true if found, false if not.\n        return this.projectList.some(project => project.getName() === projectName);\n    }\n}\n\n//# sourceURL=webpack://to-do-list/./src/projectList.js?");

/***/ }),

/***/ "./src/task.js":
/*!*********************!*\
  !*** ./src/task.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Task)\n/* harmony export */ });\nclass Task{\n    constructor(name, dueDate, details){\n        this.name = name;\n        this.dueDate = dueDate;\n        this.details = details;\n    }\n    // GETTERS AND SETTERS //\n    setTaskName(name){\n        this.name = name;\n        return\n    }\n    getTaskName(){\n        return this.name;\n    }\n    setDate(newDate){\n        this.dueDate = newDate;\n        return\n    }\n    getDate(){\n        if(this.dueDate !== null){\n            return this.dueDate;\n        }\n        return;\n    }\n    setDetails(details){\n        this.details = details;\n        return\n    }\n    getDetails(){\n        return this.details;\n    }\n}\n\n//# sourceURL=webpack://to-do-list/./src/task.js?");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./src/localStorage.js"));
/******/ }
]);